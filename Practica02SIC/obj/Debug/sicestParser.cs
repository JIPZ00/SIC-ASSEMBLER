//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\jesus\Desktop\Práctica 06 - Símbolos y Expresiones\Practica02SIC\sicest.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Practica02SIC {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class sicestParser : Parser {
	public const int
		START=1, INDICE=2, COMA=3, END=4, TIPOBYTE=5, TIPOWORD=6, RESB=7, RESW=8, 
		FINL=9, CODOP=10, RSUB=11, WS=12, CBYTE=13, XBYTE=14, NUMHEX=15, NUMHEXMIN=16, 
		NUM=17, ID=18;
	public const int
		RULE_programa = 0, RULE_inicio = 1, RULE_fin = 2, RULE_entrada = 3, RULE_proposiciones = 4, 
		RULE_proposicion = 5, RULE_instruccion = 6, RULE_directiva = 7, RULE_tipodirectiva = 8, 
		RULE_etiqueta = 9, RULE_opinstruccion = 10, RULE_indexado = 11, RULE_opdirectiva = 12, 
		RULE_num = 13, RULE_byte = 14;
	public static readonly string[] ruleNames = {
		"programa", "inicio", "fin", "entrada", "proposiciones", "proposicion", 
		"instruccion", "directiva", "tipodirectiva", "etiqueta", "opinstruccion", 
		"indexado", "opdirectiva", "num", "byte"
	};

	private static readonly string[] _LiteralNames = {
		null, "'START'", "'X'", "','", "'END'", "'BYTE'", "'WORD'", "'RESB'", 
		"'RESW'", null, null, "'RSUB'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "START", "INDICE", "COMA", "END", "TIPOBYTE", "TIPOWORD", "RESB", 
		"RESW", "FINL", "CODOP", "RSUB", "WS", "CBYTE", "XBYTE", "NUMHEX", "NUMHEXMIN", 
		"NUM", "ID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "sicest.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public sicestParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramaContext : ParserRuleContext {
		public ProgramaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programa; } }
	 
		public ProgramaContext() { }
		public virtual void CopyFrom(ProgramaContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class InicioProgramaContext : ProgramaContext {
		public InicioContext inicio() {
			return GetRuleContext<InicioContext>(0);
		}
		public ProposicionesContext proposiciones() {
			return GetRuleContext<ProposicionesContext>(0);
		}
		public FinContext fin() {
			return GetRuleContext<FinContext>(0);
		}
		public InicioProgramaContext(ProgramaContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.EnterInicioPrograma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.ExitInicioPrograma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicestVisitor<TResult> typedVisitor = visitor as IsicestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInicioPrograma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramaContext programa() {
		ProgramaContext _localctx = new ProgramaContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_programa);
		try {
			_localctx = new InicioProgramaContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 30; inicio();
			State = 31; proposiciones(0);
			State = 32; fin();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InicioContext : ParserRuleContext {
		public InicioContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inicio; } }
	 
		public InicioContext() { }
		public virtual void CopyFrom(InicioContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class EtiqiniContext : InicioContext {
		public EtiquetaContext etiqueta() {
			return GetRuleContext<EtiquetaContext>(0);
		}
		public ITerminalNode START() { return GetToken(sicestParser.START, 0); }
		public NumContext num() {
			return GetRuleContext<NumContext>(0);
		}
		public ITerminalNode FINL() { return GetToken(sicestParser.FINL, 0); }
		public EtiqiniContext(InicioContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.EnterEtiqini(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.ExitEtiqini(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicestVisitor<TResult> typedVisitor = visitor as IsicestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEtiqini(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreposContext : InicioContext {
		public ProposicionContext proposicion() {
			return GetRuleContext<ProposicionContext>(0);
		}
		public PreposContext(InicioContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.EnterPrepos(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.ExitPrepos(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicestVisitor<TResult> typedVisitor = visitor as IsicestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrepos(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InicioContext inicio() {
		InicioContext _localctx = new InicioContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_inicio);
		try {
			State = 40;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				_localctx = new EtiqiniContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 34; etiqueta();
				State = 35; Match(START);
				State = 36; num();
				State = 37; Match(FINL);
				}
				break;

			case 2:
				_localctx = new PreposContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 39; proposicion();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinContext : ParserRuleContext {
		public ITerminalNode END() { return GetToken(sicestParser.END, 0); }
		public EntradaContext entrada() {
			return GetRuleContext<EntradaContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(sicestParser.Eof, 0); }
		public FinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fin; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.EnterFin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.ExitFin(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicestVisitor<TResult> typedVisitor = visitor as IsicestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FinContext fin() {
		FinContext _localctx = new FinContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_fin);
		try {
			State = 48;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 42; Match(END);
				State = 43; entrada();
				State = 44; Match(Eof);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 46; Match(END);
				State = 47; entrada();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntradaContext : ParserRuleContext {
		public EntradaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entrada; } }
	 
		public EntradaContext() { }
		public virtual void CopyFrom(EntradaContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class EndIDContext : EntradaContext {
		public ITerminalNode ID() { return GetToken(sicestParser.ID, 0); }
		public EndIDContext(EntradaContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.EnterEndID(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.ExitEndID(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicestVisitor<TResult> typedVisitor = visitor as IsicestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndID(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NoEndIDContext : EntradaContext {
		public NoEndIDContext(EntradaContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.EnterNoEndID(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.ExitNoEndID(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicestVisitor<TResult> typedVisitor = visitor as IsicestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoEndID(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntradaContext entrada() {
		EntradaContext _localctx = new EntradaContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_entrada);
		try {
			State = 52;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ID:
				_localctx = new EndIDContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 50; Match(ID);
				}
				break;
			case Eof:
				_localctx = new NoEndIDContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProposicionesContext : ParserRuleContext {
		public ProposicionesContext proposiciones() {
			return GetRuleContext<ProposicionesContext>(0);
		}
		public ProposicionContext proposicion() {
			return GetRuleContext<ProposicionContext>(0);
		}
		public ProposicionesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proposiciones; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.EnterProposiciones(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.ExitProposiciones(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicestVisitor<TResult> typedVisitor = visitor as IsicestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProposiciones(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProposicionesContext proposiciones() {
		return proposiciones(0);
	}

	private ProposicionesContext proposiciones(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ProposicionesContext _localctx = new ProposicionesContext(_ctx, _parentState);
		ProposicionesContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_proposiciones, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 55; proposicion();
			}
			_ctx.stop = _input.Lt(-1);
			State = 61;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,3,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ProposicionesContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_proposiciones);
					State = 57;
					if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
					State = 58; proposicion();
					}
					} 
				}
				State = 63;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,3,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ProposicionContext : ParserRuleContext {
		public InstruccionContext instruccion() {
			return GetRuleContext<InstruccionContext>(0);
		}
		public ITerminalNode FINL() { return GetToken(sicestParser.FINL, 0); }
		public DirectivaContext directiva() {
			return GetRuleContext<DirectivaContext>(0);
		}
		public ProposicionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proposicion; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.EnterProposicion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.ExitProposicion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicestVisitor<TResult> typedVisitor = visitor as IsicestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProposicion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProposicionContext proposicion() {
		ProposicionContext _localctx = new ProposicionContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_proposicion);
		try {
			State = 70;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 64; instruccion();
				State = 65; Match(FINL);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 67; directiva();
				State = 68; Match(FINL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstruccionContext : ParserRuleContext {
		public InstruccionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruccion; } }
	 
		public InstruccionContext() { }
		public virtual void CopyFrom(InstruccionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ErrorCodOpContext : InstruccionContext {
		public ITerminalNode[] CODOP() { return GetTokens(sicestParser.CODOP); }
		public ITerminalNode CODOP(int i) {
			return GetToken(sicestParser.CODOP, i);
		}
		public OpinstruccionContext opinstruccion() {
			return GetRuleContext<OpinstruccionContext>(0);
		}
		public ErrorCodOpContext(InstruccionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.EnterErrorCodOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.ExitErrorCodOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicestVisitor<TResult> typedVisitor = visitor as IsicestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErrorCodOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ErrorRsubContext : InstruccionContext {
		public ITerminalNode[] RSUB() { return GetTokens(sicestParser.RSUB); }
		public ITerminalNode RSUB(int i) {
			return GetToken(sicestParser.RSUB, i);
		}
		public ErrorRsubContext(InstruccionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.EnterErrorRsub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.ExitErrorRsub(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicestVisitor<TResult> typedVisitor = visitor as IsicestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErrorRsub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InstrnormalContext : InstruccionContext {
		public EtiquetaContext etiqueta() {
			return GetRuleContext<EtiquetaContext>(0);
		}
		public ITerminalNode CODOP() { return GetToken(sicestParser.CODOP, 0); }
		public OpinstruccionContext opinstruccion() {
			return GetRuleContext<OpinstruccionContext>(0);
		}
		public InstrnormalContext(InstruccionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.EnterInstrnormal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.ExitInstrnormal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicestVisitor<TResult> typedVisitor = visitor as IsicestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstrnormal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InstrrsubContext : InstruccionContext {
		public EtiquetaContext etiqueta() {
			return GetRuleContext<EtiquetaContext>(0);
		}
		public ITerminalNode RSUB() { return GetToken(sicestParser.RSUB, 0); }
		public InstrrsubContext(InstruccionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.EnterInstrrsub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.ExitInstrrsub(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicestVisitor<TResult> typedVisitor = visitor as IsicestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstrrsub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstruccionContext instruccion() {
		InstruccionContext _localctx = new InstruccionContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_instruccion);
		try {
			State = 84;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				_localctx = new ErrorCodOpContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 72; Match(CODOP);
				State = 73; Match(CODOP);
				State = 74; opinstruccion();
				}
				break;

			case 2:
				_localctx = new ErrorRsubContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 75; Match(RSUB);
				State = 76; Match(RSUB);
				}
				break;

			case 3:
				_localctx = new InstrnormalContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 77; etiqueta();
				State = 78; Match(CODOP);
				State = 79; opinstruccion();
				}
				break;

			case 4:
				_localctx = new InstrrsubContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 81; etiqueta();
				State = 82; Match(RSUB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectivaContext : ParserRuleContext {
		public DirectivaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directiva; } }
	 
		public DirectivaContext() { }
		public virtual void CopyFrom(DirectivaContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ErrorDobleByteContext : DirectivaContext {
		public ITerminalNode[] TIPOBYTE() { return GetTokens(sicestParser.TIPOBYTE); }
		public ITerminalNode TIPOBYTE(int i) {
			return GetToken(sicestParser.TIPOBYTE, i);
		}
		public ByteContext @byte() {
			return GetRuleContext<ByteContext>(0);
		}
		public ErrorDobleByteContext(DirectivaContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.EnterErrorDobleByte(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.ExitErrorDobleByte(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicestVisitor<TResult> typedVisitor = visitor as IsicestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErrorDobleByte(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ErrorDobleDirectivaContext : DirectivaContext {
		public TipodirectivaContext[] tipodirectiva() {
			return GetRuleContexts<TipodirectivaContext>();
		}
		public TipodirectivaContext tipodirectiva(int i) {
			return GetRuleContext<TipodirectivaContext>(i);
		}
		public OpdirectivaContext opdirectiva() {
			return GetRuleContext<OpdirectivaContext>(0);
		}
		public ErrorDobleDirectivaContext(DirectivaContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.EnterErrorDobleDirectiva(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.ExitErrorDobleDirectiva(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicestVisitor<TResult> typedVisitor = visitor as IsicestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErrorDobleDirectiva(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EsBYTEContext : DirectivaContext {
		public EtiquetaContext etiqueta() {
			return GetRuleContext<EtiquetaContext>(0);
		}
		public ITerminalNode TIPOBYTE() { return GetToken(sicestParser.TIPOBYTE, 0); }
		public ByteContext @byte() {
			return GetRuleContext<ByteContext>(0);
		}
		public EsBYTEContext(DirectivaContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.EnterEsBYTE(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.ExitEsBYTE(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicestVisitor<TResult> typedVisitor = visitor as IsicestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEsBYTE(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EsDirectivaContext : DirectivaContext {
		public EtiquetaContext etiqueta() {
			return GetRuleContext<EtiquetaContext>(0);
		}
		public TipodirectivaContext tipodirectiva() {
			return GetRuleContext<TipodirectivaContext>(0);
		}
		public OpdirectivaContext opdirectiva() {
			return GetRuleContext<OpdirectivaContext>(0);
		}
		public EsDirectivaContext(DirectivaContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.EnterEsDirectiva(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.ExitEsDirectiva(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicestVisitor<TResult> typedVisitor = visitor as IsicestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEsDirectiva(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectivaContext directiva() {
		DirectivaContext _localctx = new DirectivaContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_directiva);
		try {
			State = 101;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				_localctx = new ErrorDobleByteContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 86; Match(TIPOBYTE);
				State = 87; Match(TIPOBYTE);
				State = 88; @byte();
				}
				break;

			case 2:
				_localctx = new ErrorDobleDirectivaContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 89; tipodirectiva();
				State = 90; tipodirectiva();
				State = 91; opdirectiva();
				}
				break;

			case 3:
				_localctx = new EsBYTEContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 93; etiqueta();
				State = 94; Match(TIPOBYTE);
				State = 95; @byte();
				}
				break;

			case 4:
				_localctx = new EsDirectivaContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 97; etiqueta();
				State = 98; tipodirectiva();
				State = 99; opdirectiva();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TipodirectivaContext : ParserRuleContext {
		public TipodirectivaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tipodirectiva; } }
	 
		public TipodirectivaContext() { }
		public virtual void CopyFrom(TipodirectivaContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DIRWORDContext : TipodirectivaContext {
		public ITerminalNode TIPOWORD() { return GetToken(sicestParser.TIPOWORD, 0); }
		public DIRWORDContext(TipodirectivaContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.EnterDIRWORD(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.ExitDIRWORD(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicestVisitor<TResult> typedVisitor = visitor as IsicestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDIRWORD(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DIRRESBContext : TipodirectivaContext {
		public ITerminalNode RESB() { return GetToken(sicestParser.RESB, 0); }
		public DIRRESBContext(TipodirectivaContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.EnterDIRRESB(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.ExitDIRRESB(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicestVisitor<TResult> typedVisitor = visitor as IsicestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDIRRESB(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DIRRESWContext : TipodirectivaContext {
		public ITerminalNode RESW() { return GetToken(sicestParser.RESW, 0); }
		public DIRRESWContext(TipodirectivaContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.EnterDIRRESW(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.ExitDIRRESW(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicestVisitor<TResult> typedVisitor = visitor as IsicestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDIRRESW(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TipodirectivaContext tipodirectiva() {
		TipodirectivaContext _localctx = new TipodirectivaContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_tipodirectiva);
		try {
			State = 106;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case TIPOWORD:
				_localctx = new DIRWORDContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 103; Match(TIPOWORD);
				}
				break;
			case RESB:
				_localctx = new DIRRESBContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 104; Match(RESB);
				}
				break;
			case RESW:
				_localctx = new DIRRESWContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 105; Match(RESW);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EtiquetaContext : ParserRuleContext {
		public EtiquetaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_etiqueta; } }
	 
		public EtiquetaContext() { }
		public virtual void CopyFrom(EtiquetaContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExisteIDContext : EtiquetaContext {
		public ITerminalNode ID() { return GetToken(sicestParser.ID, 0); }
		public ExisteIDContext(EtiquetaContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.EnterExisteID(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.ExitExisteID(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicestVisitor<TResult> typedVisitor = visitor as IsicestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExisteID(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NoExisteIDContext : EtiquetaContext {
		public NoExisteIDContext(EtiquetaContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.EnterNoExisteID(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.ExitNoExisteID(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicestVisitor<TResult> typedVisitor = visitor as IsicestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoExisteID(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EtiquetaContext etiqueta() {
		EtiquetaContext _localctx = new EtiquetaContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_etiqueta);
		try {
			State = 110;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ID:
				_localctx = new ExisteIDContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 108; Match(ID);
				}
				break;
			case START:
			case TIPOBYTE:
			case TIPOWORD:
			case RESB:
			case RESW:
			case CODOP:
			case RSUB:
				_localctx = new NoExisteIDContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpinstruccionContext : ParserRuleContext {
		public OpinstruccionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opinstruccion; } }
	 
		public OpinstruccionContext() { }
		public virtual void CopyFrom(OpinstruccionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExisteOpInstruccionContext : OpinstruccionContext {
		public ITerminalNode ID() { return GetToken(sicestParser.ID, 0); }
		public IndexadoContext indexado() {
			return GetRuleContext<IndexadoContext>(0);
		}
		public ExisteOpInstruccionContext(OpinstruccionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.EnterExisteOpInstruccion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.ExitExisteOpInstruccion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicestVisitor<TResult> typedVisitor = visitor as IsicestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExisteOpInstruccion(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NoexisteOpInstruccionContext : OpinstruccionContext {
		public NoexisteOpInstruccionContext(OpinstruccionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.EnterNoexisteOpInstruccion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.ExitNoexisteOpInstruccion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicestVisitor<TResult> typedVisitor = visitor as IsicestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoexisteOpInstruccion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpinstruccionContext opinstruccion() {
		OpinstruccionContext _localctx = new OpinstruccionContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_opinstruccion);
		try {
			State = 115;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ID:
				_localctx = new ExisteOpInstruccionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 112; Match(ID);
				State = 113; indexado();
				}
				break;
			case FINL:
				_localctx = new NoexisteOpInstruccionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexadoContext : ParserRuleContext {
		public IndexadoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexado; } }
	 
		public IndexadoContext() { }
		public virtual void CopyFrom(IndexadoContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class EsIndexadoContext : IndexadoContext {
		public ITerminalNode COMA() { return GetToken(sicestParser.COMA, 0); }
		public ITerminalNode INDICE() { return GetToken(sicestParser.INDICE, 0); }
		public EsIndexadoContext(IndexadoContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.EnterEsIndexado(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.ExitEsIndexado(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicestVisitor<TResult> typedVisitor = visitor as IsicestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEsIndexado(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NoEsIndexadoContext : IndexadoContext {
		public NoEsIndexadoContext(IndexadoContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.EnterNoEsIndexado(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.ExitNoEsIndexado(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicestVisitor<TResult> typedVisitor = visitor as IsicestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoEsIndexado(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexadoContext indexado() {
		IndexadoContext _localctx = new IndexadoContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_indexado);
		try {
			State = 120;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case COMA:
				_localctx = new EsIndexadoContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 117; Match(COMA);
				State = 118; Match(INDICE);
				}
				break;
			case FINL:
				_localctx = new NoEsIndexadoContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpdirectivaContext : ParserRuleContext {
		public OpdirectivaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opdirectiva; } }
	 
		public OpdirectivaContext() { }
		public virtual void CopyFrom(OpdirectivaContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DirNumContext : OpdirectivaContext {
		public ITerminalNode NUM() { return GetToken(sicestParser.NUM, 0); }
		public DirNumContext(OpdirectivaContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.EnterDirNum(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.ExitDirNum(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicestVisitor<TResult> typedVisitor = visitor as IsicestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirNum(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DirNumHexContext : OpdirectivaContext {
		public ITerminalNode NUMHEX() { return GetToken(sicestParser.NUMHEX, 0); }
		public DirNumHexContext(OpdirectivaContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.EnterDirNumHex(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.ExitDirNumHex(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicestVisitor<TResult> typedVisitor = visitor as IsicestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirNumHex(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DirConstCadContext : OpdirectivaContext {
		public ITerminalNode ID() { return GetToken(sicestParser.ID, 0); }
		public DirConstCadContext(OpdirectivaContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.EnterDirConstCad(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.ExitDirConstCad(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicestVisitor<TResult> typedVisitor = visitor as IsicestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirConstCad(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DirNumHexMinContext : OpdirectivaContext {
		public ITerminalNode NUMHEXMIN() { return GetToken(sicestParser.NUMHEXMIN, 0); }
		public DirNumHexMinContext(OpdirectivaContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.EnterDirNumHexMin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.ExitDirNumHexMin(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicestVisitor<TResult> typedVisitor = visitor as IsicestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirNumHexMin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpdirectivaContext opdirectiva() {
		OpdirectivaContext _localctx = new OpdirectivaContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_opdirectiva);
		try {
			State = 126;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NUM:
				_localctx = new DirNumContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 122; Match(NUM);
				}
				break;
			case NUMHEX:
				_localctx = new DirNumHexContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 123; Match(NUMHEX);
				}
				break;
			case ID:
				_localctx = new DirConstCadContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 124; Match(ID);
				}
				break;
			case NUMHEXMIN:
				_localctx = new DirNumHexMinContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 125; Match(NUMHEXMIN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumContext : ParserRuleContext {
		public NumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_num; } }
	 
		public NumContext() { }
		public virtual void CopyFrom(NumContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NumnormalContext : NumContext {
		public ITerminalNode NUM() { return GetToken(sicestParser.NUM, 0); }
		public NumnormalContext(NumContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.EnterNumnormal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.ExitNumnormal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicestVisitor<TResult> typedVisitor = visitor as IsicestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumnormal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumhexContext : NumContext {
		public ITerminalNode NUMHEX() { return GetToken(sicestParser.NUMHEX, 0); }
		public NumhexContext(NumContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.EnterNumhex(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.ExitNumhex(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicestVisitor<TResult> typedVisitor = visitor as IsicestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumhex(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumhexminContext : NumContext {
		public ITerminalNode NUMHEXMIN() { return GetToken(sicestParser.NUMHEXMIN, 0); }
		public NumhexminContext(NumContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.EnterNumhexmin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.ExitNumhexmin(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicestVisitor<TResult> typedVisitor = visitor as IsicestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumhexmin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumContext num() {
		NumContext _localctx = new NumContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_num);
		try {
			State = 131;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NUM:
				_localctx = new NumnormalContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 128; Match(NUM);
				}
				break;
			case NUMHEX:
				_localctx = new NumhexContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 129; Match(NUMHEX);
				}
				break;
			case NUMHEXMIN:
				_localctx = new NumhexminContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 130; Match(NUMHEXMIN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ByteContext : ParserRuleContext {
		public ByteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_byte; } }
	 
		public ByteContext() { }
		public virtual void CopyFrom(ByteContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BYTECBYTEContext : ByteContext {
		public ITerminalNode CBYTE() { return GetToken(sicestParser.CBYTE, 0); }
		public BYTECBYTEContext(ByteContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.EnterBYTECBYTE(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.ExitBYTECBYTE(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicestVisitor<TResult> typedVisitor = visitor as IsicestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBYTECBYTE(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BYTEXBYTEContext : ByteContext {
		public ITerminalNode XBYTE() { return GetToken(sicestParser.XBYTE, 0); }
		public BYTEXBYTEContext(ByteContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.EnterBYTEXBYTE(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicestListener typedListener = listener as IsicestListener;
			if (typedListener != null) typedListener.ExitBYTEXBYTE(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicestVisitor<TResult> typedVisitor = visitor as IsicestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBYTEXBYTE(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ByteContext @byte() {
		ByteContext _localctx = new ByteContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_byte);
		try {
			State = 135;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case CBYTE:
				_localctx = new BYTECBYTEContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 133; Match(CBYTE);
				}
				break;
			case XBYTE:
				_localctx = new BYTEXBYTEContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 134; Match(XBYTE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 4: return proposiciones_sempred((ProposicionesContext)_localctx, predIndex);
		}
		return true;
	}
	private bool proposiciones_sempred(ProposicionesContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 2);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x14\x8C\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x3\x2\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5"+
		"\x3+\n\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4\x33\n\x4\x3\x5\x3"+
		"\x5\x5\x5\x37\n\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\a\x6>\n\x6\f\x6\xE\x6"+
		"\x41\v\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x5\aI\n\a\x3\b\x3\b\x3\b\x3\b"+
		"\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x5\bW\n\b\x3\t\x3\t\x3\t\x3\t"+
		"\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x5\th\n\t\x3\n"+
		"\x3\n\x3\n\x5\nm\n\n\x3\v\x3\v\x5\vq\n\v\x3\f\x3\f\x3\f\x5\fv\n\f\x3\r"+
		"\x3\r\x3\r\x5\r{\n\r\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\x81\n\xE\x3\xF\x3\xF"+
		"\x3\xF\x5\xF\x86\n\xF\x3\x10\x3\x10\x5\x10\x8A\n\x10\x3\x10\x2\x2\x3\n"+
		"\x11\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2"+
		"\x18\x2\x1A\x2\x1C\x2\x1E\x2\x2\x2\x92\x2 \x3\x2\x2\x2\x4*\x3\x2\x2\x2"+
		"\x6\x32\x3\x2\x2\x2\b\x36\x3\x2\x2\x2\n\x38\x3\x2\x2\x2\fH\x3\x2\x2\x2"+
		"\xEV\x3\x2\x2\x2\x10g\x3\x2\x2\x2\x12l\x3\x2\x2\x2\x14p\x3\x2\x2\x2\x16"+
		"u\x3\x2\x2\x2\x18z\x3\x2\x2\x2\x1A\x80\x3\x2\x2\x2\x1C\x85\x3\x2\x2\x2"+
		"\x1E\x89\x3\x2\x2\x2 !\x5\x4\x3\x2!\"\x5\n\x6\x2\"#\x5\x6\x4\x2#\x3\x3"+
		"\x2\x2\x2$%\x5\x14\v\x2%&\a\x3\x2\x2&\'\x5\x1C\xF\x2\'(\a\v\x2\x2(+\x3"+
		"\x2\x2\x2)+\x5\f\a\x2*$\x3\x2\x2\x2*)\x3\x2\x2\x2+\x5\x3\x2\x2\x2,-\a"+
		"\x6\x2\x2-.\x5\b\x5\x2./\a\x2\x2\x3/\x33\x3\x2\x2\x2\x30\x31\a\x6\x2\x2"+
		"\x31\x33\x5\b\x5\x2\x32,\x3\x2\x2\x2\x32\x30\x3\x2\x2\x2\x33\a\x3\x2\x2"+
		"\x2\x34\x37\a\x14\x2\x2\x35\x37\x3\x2\x2\x2\x36\x34\x3\x2\x2\x2\x36\x35"+
		"\x3\x2\x2\x2\x37\t\x3\x2\x2\x2\x38\x39\b\x6\x1\x2\x39:\x5\f\a\x2:?\x3"+
		"\x2\x2\x2;<\f\x4\x2\x2<>\x5\f\a\x2=;\x3\x2\x2\x2>\x41\x3\x2\x2\x2?=\x3"+
		"\x2\x2\x2?@\x3\x2\x2\x2@\v\x3\x2\x2\x2\x41?\x3\x2\x2\x2\x42\x43\x5\xE"+
		"\b\x2\x43\x44\a\v\x2\x2\x44I\x3\x2\x2\x2\x45\x46\x5\x10\t\x2\x46G\a\v"+
		"\x2\x2GI\x3\x2\x2\x2H\x42\x3\x2\x2\x2H\x45\x3\x2\x2\x2I\r\x3\x2\x2\x2"+
		"JK\a\f\x2\x2KL\a\f\x2\x2LW\x5\x16\f\x2MN\a\r\x2\x2NW\a\r\x2\x2OP\x5\x14"+
		"\v\x2PQ\a\f\x2\x2QR\x5\x16\f\x2RW\x3\x2\x2\x2ST\x5\x14\v\x2TU\a\r\x2\x2"+
		"UW\x3\x2\x2\x2VJ\x3\x2\x2\x2VM\x3\x2\x2\x2VO\x3\x2\x2\x2VS\x3\x2\x2\x2"+
		"W\xF\x3\x2\x2\x2XY\a\a\x2\x2YZ\a\a\x2\x2Zh\x5\x1E\x10\x2[\\\x5\x12\n\x2"+
		"\\]\x5\x12\n\x2]^\x5\x1A\xE\x2^h\x3\x2\x2\x2_`\x5\x14\v\x2`\x61\a\a\x2"+
		"\x2\x61\x62\x5\x1E\x10\x2\x62h\x3\x2\x2\x2\x63\x64\x5\x14\v\x2\x64\x65"+
		"\x5\x12\n\x2\x65\x66\x5\x1A\xE\x2\x66h\x3\x2\x2\x2gX\x3\x2\x2\x2g[\x3"+
		"\x2\x2\x2g_\x3\x2\x2\x2g\x63\x3\x2\x2\x2h\x11\x3\x2\x2\x2im\a\b\x2\x2"+
		"jm\a\t\x2\x2km\a\n\x2\x2li\x3\x2\x2\x2lj\x3\x2\x2\x2lk\x3\x2\x2\x2m\x13"+
		"\x3\x2\x2\x2nq\a\x14\x2\x2oq\x3\x2\x2\x2pn\x3\x2\x2\x2po\x3\x2\x2\x2q"+
		"\x15\x3\x2\x2\x2rs\a\x14\x2\x2sv\x5\x18\r\x2tv\x3\x2\x2\x2ur\x3\x2\x2"+
		"\x2ut\x3\x2\x2\x2v\x17\x3\x2\x2\x2wx\a\x5\x2\x2x{\a\x4\x2\x2y{\x3\x2\x2"+
		"\x2zw\x3\x2\x2\x2zy\x3\x2\x2\x2{\x19\x3\x2\x2\x2|\x81\a\x13\x2\x2}\x81"+
		"\a\x11\x2\x2~\x81\a\x14\x2\x2\x7F\x81\a\x12\x2\x2\x80|\x3\x2\x2\x2\x80"+
		"}\x3\x2\x2\x2\x80~\x3\x2\x2\x2\x80\x7F\x3\x2\x2\x2\x81\x1B\x3\x2\x2\x2"+
		"\x82\x86\a\x13\x2\x2\x83\x86\a\x11\x2\x2\x84\x86\a\x12\x2\x2\x85\x82\x3"+
		"\x2\x2\x2\x85\x83\x3\x2\x2\x2\x85\x84\x3\x2\x2\x2\x86\x1D\x3\x2\x2\x2"+
		"\x87\x8A\a\xF\x2\x2\x88\x8A\a\x10\x2\x2\x89\x87\x3\x2\x2\x2\x89\x88\x3"+
		"\x2\x2\x2\x8A\x1F\x3\x2\x2\x2\x10*\x32\x36?HVglpuz\x80\x85\x89";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Practica02SIC
